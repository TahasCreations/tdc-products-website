// TDC Market Global Pazaryeri - Prisma Schema
// PostgreSQL Database Schema for Advanced Marketplace

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users Table (Ana kullanıcı tablosu)
model User {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  passwordHash String @map("password_hash")
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  phone     String?
  avatarUrl String?  @map("avatar_url")
  dateOfBirth DateTime? @map("date_of_birth") @db.Date
  gender    Gender?
  language  String   @default("tr")
  timezone  String   @default("Europe/Istanbul")
  isEmailVerified Boolean @default(false) @map("is_email_verified")
  isPhoneVerified Boolean @default(false) @map("is_phone_verified")
  isActive  Boolean  @default(true) @map("is_active")
  lastLoginAt DateTime? @map("last_login_at") @db.Timestamptz
  
  // Address information
  addressLine1 String? @map("address_line1")
  addressLine2 String? @map("address_line2")
  city         String?
  state        String?
  postalCode   String? @map("postal_code")
  country      String? @default("Turkey")
  
  // Preferences
  emailNotifications Boolean @default(true) @map("email_notifications")
  smsNotifications   Boolean @default(false) @map("sms_notifications")
  pushNotifications  Boolean @default(true) @map("push_notifications")
  
  // Metadata
  metadata Json @default("{}")
  
  // Relations
  seller     Seller?
  orders     Order[]
  reviews    Review[]
  wishlists  Wishlist[]
  cartItems  CartItem[]
  
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz
  
  @@map("users")
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

// Sellers Table (Satıcı tablosu)
model Seller {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @unique @map("user_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  businessName String @map("business_name")
  businessType BusinessType @map("business_type")
  taxNumber String? @map("tax_number")
  businessRegistrationNumber String? @map("business_registration_number")
  businessAddress Json @map("business_address")
  businessPhone String? @map("business_phone")
  businessEmail String? @map("business_email")
  businessWebsite String? @map("business_website")
  businessDescription String? @map("business_description")
  
  // Business documents
  businessLicenseUrl String? @map("business_license_url")
  taxCertificateUrl String? @map("tax_certificate_url")
  identityDocumentUrl String? @map("identity_document_url")
  
  // Bank information
  bankName String? @map("bank_name")
  bankAccountNumber String? @map("bank_account_number")
  bankIban String? @map("bank_iban")
  bankSwiftCode String? @map("bank_swift_code")
  
  // Status and verification
  status SellerStatus @default(PENDING)
  verificationStatus VerificationStatus @default(PENDING) @map("verification_status")
  verificationNotes String? @map("verification_notes")
  verifiedAt DateTime? @map("verified_at") @db.Timestamptz
  verifiedBy String? @map("verified_by") @db.Uuid
  
  // Commission and fees
  commissionRate Decimal @default(5.00) @map("commission_rate") @db.Decimal(5,2)
  minimumCommission Decimal @default(1.00) @map("minimum_commission") @db.Decimal(10,2)
  maximumCommission Decimal @default(50.00) @map("maximum_commission") @db.Decimal(10,2)
  
  // Performance metrics
  totalSales Decimal @default(0.00) @map("total_sales") @db.Decimal(15,2)
  totalOrders Int @default(0) @map("total_orders")
  averageRating Decimal @default(0.00) @map("average_rating") @db.Decimal(3,2)
  totalReviews Int @default(0) @map("total_reviews")
  
  // Settings
  autoAcceptOrders Boolean @default(false) @map("auto_accept_orders")
  shippingPolicy String? @map("shipping_policy")
  returnPolicy String? @map("return_policy")
  
  // Relations
  products Product[]
  
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz
  
  @@map("sellers")
}

enum BusinessType {
  INDIVIDUAL
  COMPANY
  CORPORATION
}

enum SellerStatus {
  PENDING
  APPROVED
  SUSPENDED
  REJECTED
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

// Categories Table (Kategori tablosu)
model Category {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  slug        String   @unique
  description String?
  parentId    String?  @map("parent_id") @db.Uuid
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children    Category[] @relation("CategoryHierarchy")
  imageUrl    String?  @map("image_url")
  icon        String?
  emoji       String?
  sortOrder   Int      @default(0) @map("sort_order")
  isActive    Boolean  @default(true) @map("is_active")
  seoTitle    String?  @map("seo_title")
  seoDescription String? @map("seo_description")
  seoKeywords String[] @map("seo_keywords")
  metadata    Json     @default("{}")
  
  // Relations
  products Product[]
  
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz
  
  @@map("categories")
}

// Products Table (Ürün tablosu)
model Product {
  id        String   @id @default(uuid()) @db.Uuid
  sellerId  String   @map("seller_id") @db.Uuid
  seller    Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  categoryId String? @map("category_id") @db.Uuid
  category  Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  
  // Basic information
  name            String
  slug            String
  description     String?
  shortDescription String? @map("short_description")
  sku             String? @unique
  barcode         String?
  brand           String?
  model           String?
  
  // Pricing
  price         Decimal @db.Decimal(12,2)
  comparePrice  Decimal? @map("compare_price") @db.Decimal(12,2)
  costPrice     Decimal? @map("cost_price") @db.Decimal(12,2)
  currency      Currency @default(TRY)
  
  // Inventory
  stockQuantity      Int @default(0) @map("stock_quantity")
  lowStockThreshold  Int @default(5) @map("low_stock_threshold")
  trackInventory     Boolean @default(true) @map("track_inventory")
  allowBackorder     Boolean @default(false) @map("allow_backorder")
  
  // Physical properties
  weight      Decimal? @db.Decimal(8,2)
  dimensions  Json?
  
  // Media
  images    Json @default("[]")
  videos    Json @default("[]")
  documents Json @default("[]")
  
  // Status and visibility
  status     ProductStatus @default(DRAFT)
  visibility ProductVisibility @default(PUBLIC)
  isFeatured Boolean @default(false) @map("is_featured")
  isDigital  Boolean @default(false) @map("is_digital")
  
  // SEO
  seoTitle       String? @map("seo_title")
  seoDescription String? @map("seo_description")
  seoKeywords    String[] @map("seo_keywords")
  
  // Performance metrics
  viewCount      Int @default(0) @map("view_count")
  purchaseCount  Int @default(0) @map("purchase_count")
  wishlistCount  Int @default(0) @map("wishlist_count")
  averageRating  Decimal @default(0.00) @map("average_rating") @db.Decimal(3,2)
  totalReviews   Int @default(0) @map("total_reviews")
  
  // Timestamps
  publishedAt DateTime? @map("published_at") @db.Timestamptz
  
  // Metadata
  metadata Json @default("{}")
  
  // Relations
  variants    ProductVariant[]
  orderItems  OrderItem[]
  reviews     Review[]
  wishlists   Wishlist[]
  cartItems   CartItem[]
  
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz
  
  @@unique([sellerId, slug])
  @@map("products")
}

enum Currency {
  TRY
  USD
  EUR
  GBP
}

enum ProductStatus {
  DRAFT
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum ProductVisibility {
  PUBLIC
  PRIVATE
  UNLISTED
}

// Product Variants Table (Ürün varyantları)
model ProductVariant {
  id        String   @id @default(uuid()) @db.Uuid
  productId String   @map("product_id") @db.Uuid
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Variant information
  name String
  sku  String? @unique
  
  // Pricing
  price        Decimal? @db.Decimal(12,2)
  comparePrice Decimal? @map("compare_price") @db.Decimal(12,2)
  costPrice    Decimal? @map("cost_price") @db.Decimal(12,2)
  
  // Inventory
  stockQuantity  Int @default(0) @map("stock_quantity")
  trackInventory Boolean @default(true) @map("track_inventory")
  
  // Physical properties
  weight     Decimal? @db.Decimal(8,2)
  dimensions Json?
  
  // Variant options
  option1Name  String? @map("option1_name")
  option1Value String? @map("option1_value")
  option2Name  String? @map("option2_name")
  option2Value String? @map("option2_value")
  option3Name  String? @map("option3_name")
  option3Value String? @map("option3_value")
  
  // Media
  imageUrl String? @map("image_url")
  
  // Status
  isActive Boolean @default(true) @map("is_active")
  
  // Relations
  orderItems OrderItem[]
  cartItems  CartItem[]
  
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz
  
  @@map("product_variants")
}

// Orders Table (Sipariş tablosu)
model Order {
  id          String   @id @default(uuid()) @db.Uuid
  orderNumber String   @unique @map("order_number")
  userId      String?  @map("user_id") @db.Uuid
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Order status
  status            OrderStatus @default(PENDING)
  paymentStatus     PaymentStatus @default(PENDING) @map("payment_status")
  fulfillmentStatus FulfillmentStatus @default(UNFULFILLED) @map("fulfillment_status")
  
  // Pricing
  subtotal       Decimal @db.Decimal(12,2)
  taxAmount      Decimal @default(0.00) @map("tax_amount") @db.Decimal(12,2)
  shippingAmount Decimal @default(0.00) @map("shipping_amount") @db.Decimal(12,2)
  discountAmount Decimal @default(0.00) @map("discount_amount") @db.Decimal(12,2)
  totalAmount    Decimal @map("total_amount") @db.Decimal(12,2)
  currency       Currency @default(TRY)
  
  // Customer information
  customerEmail    String? @map("customer_email")
  customerPhone    String? @map("customer_phone")
  billingAddress   Json @map("billing_address")
  shippingAddress  Json @map("shipping_address")
  
  // Shipping information
  shippingMethod        String? @map("shipping_method")
  trackingNumber        String? @map("tracking_number")
  estimatedDeliveryDate DateTime? @map("estimated_delivery_date") @db.Date
  actualDeliveryDate    DateTime? @map("actual_delivery_date") @db.Date
  
  // Payment information
  paymentMethod     String? @map("payment_method")
  paymentReference  String? @map("payment_reference")
  paidAt           DateTime? @map("paid_at") @db.Timestamptz
  
  // Notes
  customerNotes String? @map("customer_notes")
  internalNotes String? @map("internal_notes")
  
  // Timestamps
  confirmedAt  DateTime? @map("confirmed_at") @db.Timestamptz
  shippedAt    DateTime? @map("shipped_at") @db.Timestamptz
  deliveredAt  DateTime? @map("delivered_at") @db.Timestamptz
  cancelledAt  DateTime? @map("cancelled_at") @db.Timestamptz
  
  // Relations
  items   OrderItem[]
  reviews Review[]
  
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz
  
  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum FulfillmentStatus {
  UNFULFILLED
  FULFILLED
  PARTIALLY_FULFILLED
}

// Order Items Table (Sipariş kalemleri)
model OrderItem {
  id                String   @id @default(uuid()) @db.Uuid
  orderId           String   @map("order_id") @db.Uuid
  order             Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId         String?  @map("product_id") @db.Uuid
  product           Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productVariantId  String?  @map("product_variant_id") @db.Uuid
  productVariant    ProductVariant? @relation(fields: [productVariantId], references: [id], onDelete: SetNull)
  
  // Item information
  productName  String @map("product_name")
  productSku   String? @map("product_sku")
  variantName  String? @map("variant_name")
  
  // Pricing
  unitPrice    Decimal @map("unit_price") @db.Decimal(12,2)
  quantity     Int
  totalPrice   Decimal @map("total_price") @db.Decimal(12,2)
  
  // Product snapshot
  productSnapshot Json? @map("product_snapshot")
  
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  
  @@map("order_items")
}

// Reviews Table (Değerlendirmeler)
model Review {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String   @map("product_id") @db.Uuid
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderId   String?  @map("order_id") @db.Uuid
  order     Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull)
  
  // Review content
  rating  Int
  title   String?
  comment String?
  
  // Media
  images Json @default("[]")
  videos Json @default("[]")
  
  // Status
  status            ReviewStatus @default(PENDING)
  isVerifiedPurchase Boolean @default(false) @map("is_verified_purchase")
  isFeatured        Boolean @default(false) @map("is_featured")
  
  // Helpfulness
  helpfulCount    Int @default(0) @map("helpful_count")
  notHelpfulCount Int @default(0) @map("not_helpful_count")
  
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz
  
  @@unique([userId, productId])
  @@map("reviews")
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

// Wishlists Table (İstek listesi)
model Wishlist {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String   @map("product_id") @db.Uuid
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  
  @@unique([userId, productId])
  @@map("wishlists")
}

// Cart Items Table (Sepet kalemleri)
model CartItem {
  id               String   @id @default(uuid()) @db.Uuid
  userId           String   @map("user_id") @db.Uuid
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId        String   @map("product_id") @db.Uuid
  product          Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productVariantId String   @map("product_variant_id") @db.Uuid
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  
  quantity Int
  
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz
  
  @@unique([userId, productVariantId])
  @@map("cart_items")
}