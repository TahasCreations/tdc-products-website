version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: tdc-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-tdc_market}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - tdc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: tdc-redis-prod
    volumes:
      - redis_data:/data
    networks:
      - tdc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway
  api-gateway:
    image: ghcr.io/tdc-market/api-gateway:latest
    container_name: tdc-api-gateway-prod
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - PORT=3002
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tdc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Storefront
  web-storefront:
    image: ghcr.io/tdc-market/web-storefront:latest
    container_name: tdc-web-storefront-prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:3002}
      - PORT=3000
    depends_on:
      - api-gateway
    networks:
      - tdc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Admin
  web-admin:
    image: ghcr.io/tdc-market/web-admin:latest
    container_name: tdc-web-admin-prod
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:3002}
      - PORT=3001
    depends_on:
      - api-gateway
    networks:
      - tdc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Background Worker
  background-worker:
    image: ghcr.io/tdc-market/background-worker:latest
    container_name: tdc-background-worker-prod
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tdc-network
    restart: unless-stopped
    deploy:
      replicas: 2

  # Orders Worker
  orders-worker:
    image: ghcr.io/tdc-market/orders-worker:latest
    container_name: tdc-orders-worker-prod
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tdc-network
    restart: unless-stopped
    deploy:
      replicas: 2

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: tdc-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - web-storefront
      - web-admin
      - api-gateway
    networks:
      - tdc-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  tdc-network:
    driver: bridge

