// TDC Market - Prisma Schema
// Multi-vendor marketplace with NextAuth.js integration

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// === USER MANAGEMENT ===
enum Role {
  BUYER
  SELLER
  ADMIN
}

enum Plan {
  FREE
  STARTER
  GROWTH
  PRO
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  role          Role     @default(BUYER)
  isActive      Boolean  @default(true)
  
  // Seller profili (opsiyonel ilişki)
  sellerProfile SellerProfile?
  
  // Influencer profili (opsiyonel ilişki)
  influencerProfile InfluencerProfile?
  
  // NextAuth relations
  accounts      Account[]
  sessions      Session[]
  
  // E-ticaret relations
  orders        Order[]
  addresses     Address[]
  wishlistItems WishlistItem[]
  reviews       Review[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model SellerProfile {
  id             String  @id @default(cuid())
  userId         String  @unique
  storeName      String
  storeSlug      String  @unique
  description    String?
  taxNumber      String? // VKN/TCKN
  iban           String?
  status         String  @default("pending") // pending|approved|rejected
  logoUrl        String?
  policiesJson   Json?   // shipping, returns, etc.
  rating         Float   @default(0)
  totalSales     Int     @default(0)
  
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  products       Product[]
  payouts        Payout[]
  subscriptions  Subscription[]
  domains        StoreDomain[]
  theme          StoreTheme?
  adCampaigns    AdCampaign[]
  domainAllowances DomainAllowance[]
  collaborations Collaboration[]
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

model Subscription {
  id           String       @id @default(cuid())
  sellerId     String
  plan         Plan         @default(FREE)
  status       String       @default("active") // active|inactive|cancelled|past_due
  billingCycle BillingCycle @default(MONTHLY)
  price        Decimal?     @db.Decimal(12,2) // vergisiz aylık fiyat (MONTHLY) ya da YILLIK toplam (YEARLY ise total)
  currency     Currency     @default(TRY)
  periodStart  DateTime     @default(now())
  periodEnd    DateTime
  
  seller       SellerProfile @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// === PRODUCT MANAGEMENT ===
model Product {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String?
  category    String   // Ana kategori (figur-koleksiyon, moda-aksesuar, etc.)
  subcategory String?  // Alt kategori
  price       Float
  listPrice   Float? // İndirimli fiyat için
  currency    String   @default("TRY")
  stock       Int      @default(0)
  images      String[] @db.Text
  attributes  Json?    // Renk, beden, malzeme vb.
  tags        String[] @db.Text
  rating      Float    @default(0)
  reviewCount Int      @default(0)
  isActive    Boolean  @default(true)
  
  sellerId    String
  seller      SellerProfile @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  
  // Relations
  wishlistItems WishlistItem[]
  orderItems    OrderItem[]
  reviews       Review[]
  adTargets     AdTarget[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// === ORDER MANAGEMENT ===
model Order {
  id           String   @id @default(cuid())
  orderNumber  String   @unique
  userId       String
  total        Float
  currency     String   @default("TRY")
  status       String   @default("pending") // pending|paid|shipped|delivered|refunded|cancelled
  paymentRef   String?  // Ödeme sağlayıcı referansı
  shippingAddress Json? // JSON olarak saklanan adres bilgileri
  
  user         User     @relation(fields: [userId], references: [id], onDelete: SetNull)
  items        OrderItem[]
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  productId  String
  sellerId   String
  title      String
  unitPrice  Float
  qty        Int
  subtotal   Float
  
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// === PAYOUT MANAGEMENT ===
model Payout {
  id         String   @id @default(cuid())
  sellerId   String?
  influencerId String?
  collabId   String?
  amount     Float
  currency   String   @default("TRY")
  status     String   @default("scheduled") // scheduled|processing|paid|failed
  meta       Json?    // Banka bilgileri, transfer detayları
  processedAt DateTime?
  
  seller     SellerProfile? @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  collaboration Collaboration? @relation(fields: [collabId], references: [id], onDelete: Cascade)
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

// === USER ADDRESSES ===
model Address {
  id          String      @id @default(cuid())
  userId      String
  type        String      @default("shipping") // shipping|billing
  firstName   String
  lastName    String
  company     String?
  address1    String
  address2    String?
  city        String
  state       String?
  postalCode  String
  country     String      @default("Turkey")
  phone       String?
  isDefault   Boolean     @default(false)
  
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
}

// === WISHLIST ===
model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

// === REVIEWS ===
model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      // 1-5
  comment   String?
  isVerified Boolean @default(false)
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  
  @@unique([userId, productId])
}

// === WEBHOOK EVENTS ===
model WebhookEvent {
  id        String   @id @default(cuid())
  provider  String   // payment, shipping, etc.
  type      String   // event type
  payload   Json
  processed Boolean  @default(false)
  
  createdAt DateTime @default(now())
}

// === NextAuth.js TABLES ===
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// === ADVERTISING & DOMAIN MANAGEMENT ===
enum AdStatus {
  DRAFT
  ACTIVE
  PAUSED
  ENDED
}

enum DomainStatus {
  PENDING
  VERIFYING
  ACTIVE
  REJECTED
}

enum LedgerType {
  ORDER_PAID
  ORDER_REFUND
  PLATFORM_FEE
  AD_SPEND
  PAYOUT
  ADJUSTMENT
}

enum Currency {
  TRY
  USD
  EUR
}

model StoreDomain {
  id        String       @id @default(cuid())
  sellerId  String
  hostname  String       @unique
  status    DomainStatus @default(PENDING)
  dnsTarget String?      // örn: cname.vercel-dns.com veya <proje>.vercel.app
  verifiedAt DateTime?
  createdAt DateTime     @default(now())
  seller    SellerProfile @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

model StoreTheme {
  id            String   @id @default(cuid())
  sellerId      String   @unique
  logoUrl       String?
  primaryColor  String?  // hex
  heroImageUrls String[] @db.Text
  headerLayout  String?  // "logo-left-under-header" vb.
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  seller        SellerProfile @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

model AdCampaign {
  id         String   @id @default(cuid())
  sellerId   String
  name       String
  dailyBudget Decimal @db.Decimal(12,2)
  cpcMax     Decimal  @db.Decimal(12,2) // max teklif
  keywords   String[] @db.Text          // hedef anahtar kelimeler
  status     AdStatus @default(DRAFT)
  spentToday Decimal  @db.Decimal(12,2) @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  seller     SellerProfile @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  adTargets  AdTarget[]

  @@index([sellerId, status])
}

model AdClick {
  id         String  @id @default(cuid())
  campaignId String
  productId  String
  cost       Decimal @db.Decimal(12,2)
  ip         String?
  ua         String?
  createdAt  DateTime @default(now())
}

model KeywordRank {
  id           String   @id @default(cuid())
  productId    String
  keyword      String
  organicScore Float
  updatedAt    DateTime @default(now())

  @@index([keyword, organicScore])
}

model LedgerEntry {
  id       String     @id @default(cuid())
  sellerId String?
  type     LedgerType
  amount   Decimal    @db.Decimal(12,2)
  currency Currency   @default(TRY)
  meta     Json?
  createdAt DateTime  @default(now())
}

model Invoice {
  id          String   @id @default(cuid())
  sellerId    String
  periodStart DateTime
  periodEnd   DateTime
  total       Decimal  @db.Decimal(12,2)
  pdfUrl      String?
  createdAt   DateTime @default(now())
}

model AdTarget {
  id         String @id @default(cuid())
  campaignId String
  productId  String
  weight     Int    @default(1)
  campaign   AdCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([campaignId, productId])
}

model DomainAllowance {
  id            String   @id @default(cuid())
  sellerId      String
  years         Int      @default(1)  // kaç yıl domain hakkı
  consumed      Boolean  @default(false)
  grantedBySubId String?
  createdAt     DateTime @default(now())
  consumedAt    DateTime?

  seller SellerProfile @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@index([sellerId, consumed])
}

enum InfluencerStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum RateType {
  POST
  STORY
  REEL
  TIKTOK_VIDEO
  LIVE
  OTHER
}

enum CollabStatus {
  REQUESTED
  ACCEPTED
  IN_PROGRESS
  DELIVERED
  DISPUTED
  COMPLETED
  CANCELED
}

enum PayoutStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
}

enum MsgAuthor {
  SELLER
  INFLUENCER
  ADMIN
}

model InfluencerApplication {
  id          String   @id @default(cuid())
  userId      String
  platforms   String[] @db.Text
  profileLinks String[] @db.Text
  followers   Int?
  engagement  Float?   // % olarak
  niches      String[] @db.Text
  note        String?
  status      InfluencerStatus @default(PENDING)
  reviewedBy  String?
  createdAt   DateTime @default(now())
}

model InfluencerProfile {
  id           String   @id @default(cuid())
  userId       String   @unique
  displayName  String
  avatarUrl    String?
  bio          String?
  platforms    String[] @db.Text
  profileLinks String[] @db.Text
  followers    Int?
  engagement   Float?
  status       InfluencerStatus @default(APPROVED)
  visible      Boolean  @default(true)
  basePrice    Decimal? @db.Decimal(12,2)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  rates        InfluencerRate[]
  collaborations Collaboration[]
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model InfluencerRate {
  id            String   @id @default(cuid())
  influencerId  String
  type          RateType
  price         Decimal  @db.Decimal(12,2)
  currency      Currency @default(TRY)
  productId     String?  // ürün bazlı özel fiyat (opsiyonel)
  influencer    InfluencerProfile @relation(fields: [influencerId], references: [id], onDelete: Cascade)

  @@index([influencerId, type])
}

model Collaboration {
  id            String   @id @default(cuid())
  sellerId      String
  influencerId  String
  productId     String
  title         String
  description   String?
  deliverables  String[] @db.Text // "1 Reel + 1 Story" vb.
  price         Decimal  @db.Decimal(12,2)
  currency      Currency @default(TRY)
  platformFeePct Float   @default(0.10)         // %10
  status        CollabStatus @default(REQUESTED)
  deadline      DateTime?
  trackingSlug  String?   @unique
  promoCode     String?
  proofUrls     String[] @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  influencer    InfluencerProfile @relation(fields: [influencerId], references: [id], onDelete: Cascade)
  seller        SellerProfile     @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  conversation  Conversation?
  payouts       Payout[]

  @@index([status], map: "idx_collab_status")
}

model Conversation {
  id            String   @id @default(cuid())
  collabId      String   @unique
  sellerId      String
  influencerId  String
  createdAt     DateTime @default(now())
  messages      Message[]
  
  collaboration Collaboration @relation(fields: [collabId], references: [id], onDelete: Cascade)
}

model Message {
  id            String @id @default(cuid())
  conversationId String
  author        MsgAuthor
  text          String
  attachments   String[] @db.Text
  createdAt     DateTime @default(now())
  conversation  Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}
